/**
 * Arm API
 * REST API to manage your virtual devices.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiConflictError from '../model/ApiConflictError';
import ApiError from '../model/ApiError';
import ApiNotFoundError from '../model/ApiNotFoundError';
import ApiToken from '../model/ApiToken';
import Firmware from '../model/Firmware';
import GpioStateDefinition from '../model/GpioStateDefinition';
import Image from '../model/Image';
import Instance from '../model/Instance';
import InstanceConsoleEndpoint from '../model/InstanceConsoleEndpoint';
import InstanceCreateOptions from '../model/InstanceCreateOptions';
import InstanceReturn from '../model/InstanceReturn';
import InstanceStartOptions from '../model/InstanceStartOptions';
import InstanceState from '../model/InstanceState';
import InstanceStopOptions from '../model/InstanceStopOptions';
import Model from '../model/Model';
import PeripheralsData from '../model/PeripheralsData';
import Project from '../model/Project';
import Snapshot from '../model/Snapshot';
import SnapshotCreationOptions from '../model/SnapshotCreationOptions';
import Token from '../model/Token';
import UserError from '../model/UserError';
import V1SetStateBody from '../model/V1SetStateBody';

/**
* Arm service.
* @module Arm/ArmApi
* @version 1.0.0
*/
export default class ArmApi {

    /**
    * Constructs a new ArmApi. 
    * @alias module:Arm/ArmApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Log In
     * @param {module:model/ApiToken} apiToken Authorization Data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Token} and HTTP response
     */
    v1AuthLoginWithHttpInfo(apiToken) {
      let postBody = apiToken;
      // verify the required parameter 'apiToken' is set
      if (apiToken === undefined || apiToken === null) {
        throw new Error("Missing the required parameter 'apiToken' when calling v1AuthLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/v1/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Log In
     * @param {module:model/ApiToken} apiToken Authorization Data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Token}
     */
    v1AuthLogin(apiToken) {
      return this.v1AuthLoginWithHttpInfo(apiToken)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new Image
     * @param {String} type Image type
     * @param {module:model/String} encoding How the file is stored
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Image name
     * @param {String} opts.project Project ID
     * @param {String} opts.instance Instance ID
     * @param {File} opts.file Optionally the actual file
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Image} and HTTP response
     */
    v1CreateImageWithHttpInfo(type, encoding, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling v1CreateImage");
      }
      // verify the required parameter 'encoding' is set
      if (encoding === undefined || encoding === null) {
        throw new Error("Missing the required parameter 'encoding' when calling v1CreateImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'type': type,
        'encoding': encoding,
        'name': opts['name'],
        'project': opts['project'],
        'instance': opts['instance'],
        'file': opts['file']
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Image;
      return this.apiClient.callApi(
        '/v1/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new Image
     * @param {String} type Image type
     * @param {module:model/String} encoding How the file is stored
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Image name
     * @param {String} opts.project Project ID
     * @param {String} opts.instance Instance ID
     * @param {File} opts.file Optionally the actual file
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Image}
     */
    v1CreateImage(type, encoding, opts) {
      return this.v1CreateImageWithHttpInfo(type, encoding, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Instance
     * @param {module:model/InstanceCreateOptions} instanceCreateOptions The vm definition to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstanceReturn} and HTTP response
     */
    v1CreateInstanceWithHttpInfo(instanceCreateOptions) {
      let postBody = instanceCreateOptions;
      // verify the required parameter 'instanceCreateOptions' is set
      if (instanceCreateOptions === undefined || instanceCreateOptions === null) {
        throw new Error("Missing the required parameter 'instanceCreateOptions' when calling v1CreateInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InstanceReturn;
      return this.apiClient.callApi(
        '/v1/instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Instance
     * @param {module:model/InstanceCreateOptions} instanceCreateOptions The vm definition to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstanceReturn}
     */
    v1CreateInstance(instanceCreateOptions) {
      return this.v1CreateInstanceWithHttpInfo(instanceCreateOptions)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Instance Snapshot
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/SnapshotCreationOptions} snapshotCreationOptions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Snapshot} and HTTP response
     */
    v1CreateSnapshotWithHttpInfo(instanceId, snapshotCreationOptions) {
      let postBody = snapshotCreationOptions;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1CreateSnapshot");
      }
      // verify the required parameter 'snapshotCreationOptions' is set
      if (snapshotCreationOptions === undefined || snapshotCreationOptions === null) {
        throw new Error("Missing the required parameter 'snapshotCreationOptions' when calling v1CreateSnapshot");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Snapshot;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/snapshots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Instance Snapshot
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/SnapshotCreationOptions} snapshotCreationOptions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Snapshot}
     */
    v1CreateSnapshot(instanceId, snapshotCreationOptions) {
      return this.v1CreateSnapshotWithHttpInfo(instanceId, snapshotCreationOptions)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Image
     * @param {String} imageId Image ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1DeleteImageWithHttpInfo(imageId) {
      let postBody = null;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling v1DeleteImage");
      }

      let pathParams = {
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/images/{imageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Image
     * @param {String} imageId Image ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1DeleteImage(imageId) {
      return this.v1DeleteImageWithHttpInfo(imageId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove Instance
     * @param {String} instanceId Instance ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1DeleteInstanceWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1DeleteInstance");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove Instance
     * @param {String} instanceId Instance ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1DeleteInstance(instanceId) {
      return this.v1DeleteInstanceWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Image Metadata
     * @param {String} imageId Image ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Image} and HTTP response
     */
    v1GetImageWithHttpInfo(imageId) {
      let postBody = null;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling v1GetImage");
      }

      let pathParams = {
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Image;
      return this.apiClient.callApi(
        '/v1/images/{imageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Image Metadata
     * @param {String} imageId Image ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Image}
     */
    v1GetImage(imageId) {
      return this.v1GetImageWithHttpInfo(imageId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all Images Metadata
     * @param {Object} opts Optional parameters
     * @param {String} opts.project Optionally filter by project - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Image} and HTTP response
     */
    v1GetImagesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'project': opts['project']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Image;
      return this.apiClient.callApi(
        '/v1/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all Images Metadata
     * @param {Object} opts Optional parameters
     * @param {String} opts.project Optionally filter by project - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Image}
     */
    v1GetImages(opts) {
      return this.v1GetImagesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Instance
     * @param {String} instanceId Instance ID
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.returnAttr Attributes to include in instance return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Instance} and HTTP response
     */
    v1GetInstanceWithHttpInfo(instanceId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1GetInstance");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
        'returnAttr': this.apiClient.buildCollectionParam(opts['returnAttr'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Instance;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Instance
     * @param {String} instanceId Instance ID
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.returnAttr Attributes to include in instance return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Instance}
     */
    v1GetInstance(instanceId, opts) {
      return this.v1GetInstanceWithHttpInfo(instanceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get console websocket URL
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstanceConsoleEndpoint} and HTTP response
     */
    v1GetInstanceConsoleWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1GetInstanceConsole");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceConsoleEndpoint;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/console', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get console websocket URL
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstanceConsoleEndpoint}
     */
    v1GetInstanceConsole(instanceId) {
      return this.v1GetInstanceConsoleWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Instance GPIOs
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, module:model/{String: GpioStateDefinition}>} and HTTP response
     */
    v1GetInstanceGpiosWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1GetInstanceGpios");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': GpioStateDefinition};
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/gpios', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Instance GPIOs
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, module:model/{String: GpioStateDefinition}>}
     */
    v1GetInstanceGpios(instanceId) {
      return this.v1GetInstanceGpiosWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Instance Peripherals
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PeripheralsData} and HTTP response
     */
    v1GetInstancePeripheralsWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1GetInstancePeripherals");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PeripheralsData;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/peripherals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Instance Peripherals
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PeripheralsData}
     */
    v1GetInstancePeripherals(instanceId) {
      return this.v1GetInstancePeripheralsWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get state of Instance
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InstanceState} and HTTP response
     */
    v1GetInstanceStateWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1GetInstanceState");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceState;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get state of Instance
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InstanceState}
     */
    v1GetInstanceState(instanceId) {
      return this.v1GetInstanceStateWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Instances
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Optionally filter by project name
     * @param {Array.<String>} opts.returnAttr Attributes to include in instance return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Instance>} and HTTP response
     */
    v1GetInstancesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'returnAttr': this.apiClient.buildCollectionParam(opts['returnAttr'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Instance];
      return this.apiClient.callApi(
        '/v1/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Instances
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Optionally filter by project name
     * @param {Array.<String>} opts.returnAttr Attributes to include in instance return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Instance>}
     */
    v1GetInstances(opts) {
      return this.v1GetInstancesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Software for Model
     * @param {String} model Model to list available software for
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Firmware>} and HTTP response
     */
    v1GetModelSoftwareWithHttpInfo(model) {
      let postBody = null;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling v1GetModelSoftware");
      }

      let pathParams = {
        'model': model
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Firmware];
      return this.apiClient.callApi(
        '/v1/models/{model}/software', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Software for Model
     * @param {String} model Model to list available software for
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Firmware>}
     */
    v1GetModelSoftware(model) {
      return this.v1GetModelSoftwareWithHttpInfo(model)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Supported Models
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Model>} and HTTP response
     */
    v1GetModelsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Model];
      return this.apiClient.callApi(
        '/v1/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Supported Models
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Model>}
     */
    v1GetModels() {
      return this.v1GetModelsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Project
     * @param {String} projectId Project ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
     */
    v1GetProjectWithHttpInfo(projectId) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling v1GetProject");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/v1/projects/{projectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Project
     * @param {String} projectId Project ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
     */
    v1GetProject(projectId) {
      return this.v1GetProjectWithHttpInfo(projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Instances in Project
     * @param {String} projectId Project ID - uuid
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by project name
     * @param {Array.<String>} opts.returnAttr Attributes to include in instance return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Instance>} and HTTP response
     */
    v1GetProjectInstancesWithHttpInfo(projectId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling v1GetProjectInstances");
      }

      let pathParams = {
        'projectId': projectId
      };
      let queryParams = {
        'name': opts['name'],
        'returnAttr': this.apiClient.buildCollectionParam(opts['returnAttr'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Instance];
      return this.apiClient.callApi(
        '/v1/projects/{projectId}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Instances in Project
     * @param {String} projectId Project ID - uuid
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by project name
     * @param {Array.<String>} opts.returnAttr Attributes to include in instance return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Instance>}
     */
    v1GetProjectInstances(projectId, opts) {
      return this.v1GetProjectInstancesWithHttpInfo(projectId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by project name
     * @param {Boolean} opts.idsOnly Only include id of project in results
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Project>} and HTTP response
     */
    v1GetProjectsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'ids_only': opts['idsOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Project];
      return this.apiClient.callApi(
        '/v1/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Filter by project name
     * @param {Boolean} opts.idsOnly Only include id of project in results
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Project>}
     */
    v1GetProjects(opts) {
      return this.v1GetProjectsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Instance Snapshots
     * @param {String} instanceId Instance ID - uuid
     * @param {String} snapshotId Snapshot ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Snapshot} and HTTP response
     */
    v1GetSnapshotWithHttpInfo(instanceId, snapshotId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1GetSnapshot");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling v1GetSnapshot");
      }

      let pathParams = {
        'instanceId': instanceId,
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Snapshot;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/snapshots/{snapshotId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Instance Snapshots
     * @param {String} instanceId Instance ID - uuid
     * @param {String} snapshotId Snapshot ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Snapshot}
     */
    v1GetSnapshot(instanceId, snapshotId) {
      return this.v1GetSnapshotWithHttpInfo(instanceId, snapshotId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Instance Snapshots
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Snapshot>} and HTTP response
     */
    v1GetSnapshotsWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1GetSnapshots");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Snapshot];
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/snapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Instance Snapshots
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Snapshot>}
     */
    v1GetSnapshots(instanceId) {
      return this.v1GetSnapshotsWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Instance
     * @param {String} instanceId Instance ID
     * @param {Object.<String, Object>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Instance} and HTTP response
     */
    v1PatchInstanceWithHttpInfo(instanceId, body) {
      let postBody = body;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1PatchInstance");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v1PatchInstance");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Instance;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Instance
     * @param {String} instanceId Instance ID
     * @param {Object.<String, Object>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Instance}
     */
    v1PatchInstance(instanceId, body) {
      return this.v1PatchInstanceWithHttpInfo(instanceId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Pause an Instance
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1PauseInstanceWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1PauseInstance");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/pause', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Pause an Instance
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1PauseInstance(instanceId) {
      return this.v1PauseInstanceWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * API Status
     * Check if  API is ready for queries
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1ReadyWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/ready', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * API Status
     * Check if  API is ready for queries
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1Ready() {
      return this.v1ReadyWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reboot an Instance
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1RebootInstanceWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1RebootInstance");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/reboot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reboot an Instance
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1RebootInstance(instanceId) {
      return this.v1RebootInstanceWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Restore a Snapshot
     * @param {String} instanceId Instance ID - uuid
     * @param {String} snapshotId Snapshot ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1RestoreSnapshotWithHttpInfo(instanceId, snapshotId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1RestoreSnapshot");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling v1RestoreSnapshot");
      }

      let pathParams = {
        'instanceId': instanceId,
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/snapshots/{snapshotId}/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Restore a Snapshot
     * @param {String} instanceId Instance ID - uuid
     * @param {String} snapshotId Snapshot ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1RestoreSnapshot(instanceId, snapshotId) {
      return this.v1RestoreSnapshotWithHttpInfo(instanceId, snapshotId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set Instance GPIOs
     * @param {String} instanceId Instance ID - uuid
     * @param {Object.<String, module:model/{String: GpioStateDefinition}>} requestBody New GPIO state
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, module:model/{String: GpioStateDefinition}>} and HTTP response
     */
    v1SetInstanceGpiosWithHttpInfo(instanceId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1SetInstanceGpios");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling v1SetInstanceGpios");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': GpioStateDefinition};
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/gpios', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set Instance GPIOs
     * @param {String} instanceId Instance ID - uuid
     * @param {Object.<String, module:model/{String: GpioStateDefinition}>} requestBody New GPIO state
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, module:model/{String: GpioStateDefinition}>}
     */
    v1SetInstanceGpios(instanceId, requestBody) {
      return this.v1SetInstanceGpiosWithHttpInfo(instanceId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set Instance Peripherals
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/PeripheralsData} peripheralsData New peripherals state
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PeripheralsData} and HTTP response
     */
    v1SetInstancePeripheralsWithHttpInfo(instanceId, peripheralsData) {
      let postBody = peripheralsData;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1SetInstancePeripherals");
      }
      // verify the required parameter 'peripheralsData' is set
      if (peripheralsData === undefined || peripheralsData === null) {
        throw new Error("Missing the required parameter 'peripheralsData' when calling v1SetInstancePeripherals");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PeripheralsData;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/peripherals', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set Instance Peripherals
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/PeripheralsData} peripheralsData New peripherals state
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PeripheralsData}
     */
    v1SetInstancePeripherals(instanceId, peripheralsData) {
      return this.v1SetInstancePeripheralsWithHttpInfo(instanceId, peripheralsData)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set state of Instance
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/V1SetStateBody} v1SetStateBody Desired State
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1SetInstanceStateWithHttpInfo(instanceId, v1SetStateBody) {
      let postBody = v1SetStateBody;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1SetInstanceState");
      }
      // verify the required parameter 'v1SetStateBody' is set
      if (v1SetStateBody === undefined || v1SetStateBody === null) {
        throw new Error("Missing the required parameter 'v1SetStateBody' when calling v1SetInstanceState");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/state', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set state of Instance
     * @param {String} instanceId Instance ID - uuid
     * @param {module:model/V1SetStateBody} v1SetStateBody Desired State
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1SetInstanceState(instanceId, v1SetStateBody) {
      return this.v1SetInstanceStateWithHttpInfo(instanceId, v1SetStateBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Snapshot
     * @param {String} instanceId Instance ID - uuid
     * @param {String} snapshotId Snapshot ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1SnapshotDeleteWithHttpInfo(instanceId, snapshotId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1SnapshotDelete");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling v1SnapshotDelete");
      }

      let pathParams = {
        'instanceId': instanceId,
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/snapshots/{snapshotId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Snapshot
     * @param {String} instanceId Instance ID - uuid
     * @param {String} snapshotId Snapshot ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1SnapshotDelete(instanceId, snapshotId) {
      return this.v1SnapshotDeleteWithHttpInfo(instanceId, snapshotId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Rename a Snapshot
     * @param {String} instanceId Instance ID - uuid
     * @param {String} snapshotId Snapshot ID - uuid
     * @param {module:model/SnapshotCreationOptions} snapshotCreationOptions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Snapshot} and HTTP response
     */
    v1SnapshotRenameWithHttpInfo(instanceId, snapshotId, snapshotCreationOptions) {
      let postBody = snapshotCreationOptions;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1SnapshotRename");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling v1SnapshotRename");
      }
      // verify the required parameter 'snapshotCreationOptions' is set
      if (snapshotCreationOptions === undefined || snapshotCreationOptions === null) {
        throw new Error("Missing the required parameter 'snapshotCreationOptions' when calling v1SnapshotRename");
      }

      let pathParams = {
        'instanceId': instanceId,
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Snapshot;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/snapshots/{snapshotId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Rename a Snapshot
     * @param {String} instanceId Instance ID - uuid
     * @param {String} snapshotId Snapshot ID - uuid
     * @param {module:model/SnapshotCreationOptions} snapshotCreationOptions 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Snapshot}
     */
    v1SnapshotRename(instanceId, snapshotId, snapshotCreationOptions) {
      return this.v1SnapshotRenameWithHttpInfo(instanceId, snapshotId, snapshotCreationOptions)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start an Instance
     * @param {String} instanceId Instance ID - uuid
     * @param {Object} opts Optional parameters
     * @param {module:model/InstanceStartOptions} opts.instanceStartOptions Start options
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1StartInstanceWithHttpInfo(instanceId, opts) {
      opts = opts || {};
      let postBody = opts['instanceStartOptions'];
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1StartInstance");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Start an Instance
     * @param {String} instanceId Instance ID - uuid
     * @param {Object} opts Optional parameters
     * @param {module:model/InstanceStartOptions} opts.instanceStartOptions Start options
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1StartInstance(instanceId, opts) {
      return this.v1StartInstanceWithHttpInfo(instanceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stop an Instance
     * @param {String} instanceId Instance ID - uuid
     * @param {Object} opts Optional parameters
     * @param {module:model/InstanceStopOptions} opts.instanceStopOptions Stop options
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1StopInstanceWithHttpInfo(instanceId, opts) {
      opts = opts || {};
      let postBody = opts['instanceStopOptions'];
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1StopInstance");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Stop an Instance
     * @param {String} instanceId Instance ID - uuid
     * @param {Object} opts Optional parameters
     * @param {module:model/InstanceStopOptions} opts.instanceStopOptions Stop options
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1StopInstance(instanceId, opts) {
      return this.v1StopInstanceWithHttpInfo(instanceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unpause an Instance
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    v1UnpauseInstanceWithHttpInfo(instanceId) {
      let postBody = null;
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling v1UnpauseInstance");
      }

      let pathParams = {
        'instanceId': instanceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/instances/{instanceId}/unpause', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Unpause an Instance
     * @param {String} instanceId Instance ID - uuid
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    v1UnpauseInstance(instanceId) {
      return this.v1UnpauseInstanceWithHttpInfo(instanceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload Image Data
     * If the active project has enough remaining quota, updates an Image with the contents of the request body.
     * @param {String} imageId Image ID - uuid
     * @param {String} body Uploaded Image
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Image} and HTTP response
     */
    v1UploadImageDataWithHttpInfo(imageId, body) {
      let postBody = body;
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling v1UploadImageData");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling v1UploadImageData");
      }

      let pathParams = {
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['binary'];
      let accepts = ['application/json'];
      let returnType = Image;
      return this.apiClient.callApi(
        '/v1/images/{imageId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload Image Data
     * If the active project has enough remaining quota, updates an Image with the contents of the request body.
     * @param {String} imageId Image ID - uuid
     * @param {String} body Uploaded Image
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Image}
     */
    v1UploadImageData(imageId, body) {
      return this.v1UploadImageDataWithHttpInfo(imageId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
