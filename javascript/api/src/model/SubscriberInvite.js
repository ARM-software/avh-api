/**
 * Arm API
 *    This documents the Arm Virtual Hosting REST API.  For other examples and API clients such as python or javascript please see [API Clients (python/javascript)](https://github.com/ARM-software/avh-api).   For a guide on using this interface please see [API Quickstart](https://intercom.help/arm-avh/en/articles/6134791-quickstart-for-the-api-docs)   ## Links   - [API Quickstart](https://intercom.help/arm-avh/en/articles/6134791-quickstart-for-the-api-docs)   - [API Clients (python/javascript)](https://github.com/arm-software/avh-api)   
 *
 * The version of the OpenAPI document: 3.15.0-15704
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CouponOptions from './CouponOptions';
import Plan from './Plan';
import Trial from './Trial';

/**
 * The SubscriberInvite model module.
 * @module model/SubscriberInvite
 * @version 1.0.2
 */
class SubscriberInvite {
    /**
     * Constructs a new <code>SubscriberInvite</code>.
     * Subscriber Invite
     * @alias module:model/SubscriberInvite
     * @param couponCode {String} Coupon code
     * @param aggregate {String} Aggregate
     * @param active {Boolean} Is Active flag
     * @param reusable {Boolean} Is reusable flag
     * @param createdAt {String} Created Date in ISO-8601 format e.g. 2022-05-06T02:39:23.000Z
     * @param updatedAt {String} Updated Date in ISO-8601 format e.g. 2022-05-06T02:39:23.000Z
     */
    constructor(couponCode, aggregate, active, reusable, createdAt, updatedAt) { 
        
        SubscriberInvite.initialize(this, couponCode, aggregate, active, reusable, createdAt, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, couponCode, aggregate, active, reusable, createdAt, updatedAt) { 
        obj['coupon_code'] = couponCode;
        obj['aggregate'] = aggregate;
        obj['active'] = active;
        obj['reusable'] = reusable;
        obj['createdAt'] = createdAt;
        obj['updatedAt'] = updatedAt;
    }

    /**
     * Constructs a <code>SubscriberInvite</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriberInvite} obj Optional instance to populate.
     * @return {module:model/SubscriberInvite} The populated <code>SubscriberInvite</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriberInvite();

            if (data.hasOwnProperty('coupon_options')) {
                obj['coupon_options'] = CouponOptions.constructFromObject(data['coupon_options']);
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = Plan.constructFromObject(data['plan']);
            }
            if (data.hasOwnProperty('trial')) {
                obj['trial'] = Trial.constructFromObject(data['trial']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('coupon_code')) {
                obj['coupon_code'] = ApiClient.convertToType(data['coupon_code'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('aggregate')) {
                obj['aggregate'] = ApiClient.convertToType(data['aggregate'], 'String');
            }
            if (data.hasOwnProperty('use_by')) {
                obj['use_by'] = ApiClient.convertToType(data['use_by'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('reusable')) {
                obj['reusable'] = ApiClient.convertToType(data['reusable'], 'Boolean');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/CouponOptions} coupon_options
 */
SubscriberInvite.prototype['coupon_options'] = undefined;

/**
 * @member {module:model/Plan} plan
 */
SubscriberInvite.prototype['plan'] = undefined;

/**
 * @member {module:model/Trial} trial
 */
SubscriberInvite.prototype['trial'] = undefined;

/**
 * Name
 * @member {String} name
 */
SubscriberInvite.prototype['name'] = undefined;

/**
 * Email
 * @member {String} email
 */
SubscriberInvite.prototype['email'] = undefined;

/**
 * Coupon code
 * @member {String} coupon_code
 */
SubscriberInvite.prototype['coupon_code'] = undefined;

/**
 * Domain
 * @member {String} domain
 */
SubscriberInvite.prototype['domain'] = undefined;

/**
 * Aggregate
 * @member {String} aggregate
 */
SubscriberInvite.prototype['aggregate'] = undefined;

/**
 * Used By
 * @member {String} use_by
 */
SubscriberInvite.prototype['use_by'] = undefined;

/**
 * Is Active flag
 * @member {Boolean} active
 */
SubscriberInvite.prototype['active'] = undefined;

/**
 * Is reusable flag
 * @member {Boolean} reusable
 */
SubscriberInvite.prototype['reusable'] = undefined;

/**
 * Created Date in ISO-8601 format e.g. 2022-05-06T02:39:23.000Z
 * @member {String} createdAt
 */
SubscriberInvite.prototype['createdAt'] = undefined;

/**
 * Updated Date in ISO-8601 format e.g. 2022-05-06T02:39:23.000Z
 * @member {String} updatedAt
 */
SubscriberInvite.prototype['updatedAt'] = undefined;






export default SubscriberInvite;

