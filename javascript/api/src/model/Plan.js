/**
 * Arm API
 *    This documents the Arm Virtual Hosting REST API.  For other examples and API clients such as python or javascript please see [API Clients (python/javascript)](https://github.com/ARM-software/avh-api).   For a guide on using this interface please see [API Quickstart](https://intercom.help/arm-avh/en/articles/6134791-quickstart-for-the-api-docs)   ## Links   - [API Quickstart](https://intercom.help/arm-avh/en/articles/6134791-quickstart-for-the-api-docs)   - [API Clients (python/javascript)](https://github.com/arm-software/avh-api)   
 *
 * The version of the OpenAPI document: 3.15.0-15704
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Plan model module.
 * @module model/Plan
 * @version 1.0.3
 */
class Plan {
    /**
     * Constructs a new <code>Plan</code>.
     * Plan options
     * @alias module:model/Plan
     * @param licenseType {module:model/Plan.LicenseTypeEnum} 
     * @param cores {Number} Number of CPU cores
     */
    constructor(licenseType, cores) { 
        
        Plan.initialize(this, licenseType, cores);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, licenseType, cores) { 
        obj['licenseType'] = licenseType;
        obj['cores'] = cores;
    }

    /**
     * Constructs a <code>Plan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Plan} obj Optional instance to populate.
     * @return {module:model/Plan} The populated <code>Plan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Plan();

            if (data.hasOwnProperty('licenseType')) {
                obj['licenseType'] = ApiClient.convertToType(data['licenseType'], 'String');
            }
            if (data.hasOwnProperty('cores')) {
                obj['cores'] = ApiClient.convertToType(data['cores'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * 
 * @member {module:model/Plan.LicenseTypeEnum} licenseType
 */
Plan.prototype['licenseType'] = undefined;

/**
 * Number of CPU cores
 * @member {Number} cores
 */
Plan.prototype['cores'] = undefined;





/**
 * Allowed values for the <code>licenseType</code> property.
 * @enum {String}
 * @readonly
 */
Plan['LicenseTypeEnum'] = {

    /**
     * value: "premium"
     * @const
     */
    "premium": "premium",

    /**
     * value: "individual"
     * @const
     */
    "individual": "individual",

    /**
     * value: "standard"
     * @const
     */
    "standard": "standard",

    /**
     * value: "enterprise"
     * @const
     */
    "enterprise": "enterprise",

    /**
     * value: "individual-usage"
     * @const
     */
    "individual-usage": "individual-usage",

    /**
     * value: "enterprise-usage"
     * @const
     */
    "enterprise-usage": "enterprise-usage",

    /**
     * value: "unrestricted"
     * @const
     */
    "unrestricted": "unrestricted"
};



export default Plan;

