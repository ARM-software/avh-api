/**
 * Arm API
 *    This documents the Arm Virtual Hosting REST API.  For other examples and API clients such as python or javascript please see [API Clients (python/javascript)](https://github.com/ARM-software/avh-api).   For a guide on using this interface please see [API Quickstart](https://intercom.help/arm-avh/en/articles/6134791-quickstart-for-the-api-docs)   ## Links   - [API Quickstart](https://intercom.help/arm-avh/en/articles/6134791-quickstart-for-the-api-docs)   - [API Clients (python/javascript)](https://github.com/arm-software/avh-api)   
 *
 * The version of the OpenAPI document: 3.15.0-15704
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TextInput from './TextInput';
import TouchCurveInput from './TouchCurveInput';
import TouchInput from './TouchInput';

/**
 * The InstanceInput model module.
 * @module model/InstanceInput
 * @version 1.0.2
 */
class InstanceInput {
    /**
     * Constructs a new <code>InstanceInput</code>.
     * 
     * @alias module:model/InstanceInput
     * @implements module:model/TouchInput
     * @implements module:model/TouchCurveInput
     * @implements module:model/TextInput
     */
    constructor() { 
        TouchInput.initialize(this);TouchCurveInput.initialize(this);TextInput.initialize(this);
        InstanceInput.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InstanceInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstanceInput} obj Optional instance to populate.
     * @return {module:model/InstanceInput} The populated <code>InstanceInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstanceInput();
            TouchInput.constructFromObject(data, obj);
            TouchCurveInput.constructFromObject(data, obj);
            TextInput.constructFromObject(data, obj);

            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], Object);
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], Object);
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], Object);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Finger Positions
 * @member {Object} position
 */
InstanceInput.prototype['position'] = undefined;

/**
 * Finger Positions
 * @member {Object} start
 */
InstanceInput.prototype['start'] = undefined;

/**
 * Finger Positions
 * @member {Object} end
 */
InstanceInput.prototype['end'] = undefined;

/**
 * text to type
 * @member {String} text
 */
InstanceInput.prototype['text'] = undefined;


// Implement TouchInput interface:
/**
 * Finger Positions
 * @member {Object} position
 */
TouchInput.prototype['position'] = undefined;
// Implement TouchCurveInput interface:
/**
 * Finger Positions
 * @member {Object} start
 */
TouchCurveInput.prototype['start'] = undefined;
/**
 * Finger Positions
 * @member {Object} end
 */
TouchCurveInput.prototype['end'] = undefined;
// Implement TextInput interface:
/**
 * text to type
 * @member {String} text
 */
TextInput.prototype['text'] = undefined;




export default InstanceInput;

