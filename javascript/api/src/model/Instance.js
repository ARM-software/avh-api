/**
 * Arm API
 *    This documents the Arm Virtual Hosting REST API.  For other examples and API clients such as python or javascript please see [API Clients (python/javascript)](https://github.com/ARM-software/avh-api).   For a guide on using this interface please see [API Quickstart](https://intercom.help/arm-avh/en/articles/6134791-quickstart-for-the-api-docs)   ## Links   - [API Quickstart](https://intercom.help/arm-avh/en/articles/6134791-quickstart-for-the-api-docs)   - [API Clients (python/javascript)](https://github.com/arm-software/avh-api)   
 *
 * The version of the OpenAPI document: 3.15.0-15704
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreatedBy from './CreatedBy';
import InstanceBootOptions from './InstanceBootOptions';
import InstanceNetmonState from './InstanceNetmonState';
import InstanceServices from './InstanceServices';
import InstanceState from './InstanceState';

/**
 * The Instance model module.
 * @module model/Instance
 * @version 1.0.2
 */
class Instance {
    /**
     * Constructs a new <code>Instance</code>.
     * 
     * @alias module:model/Instance
     */
    constructor() { 
        
        Instance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Instance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Instance} obj Optional instance to populate.
     * @return {module:model/Instance} The populated <code>Instance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Instance();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('flavor')) {
                obj['flavor'] = ApiClient.convertToType(data['flavor'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = InstanceState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('stateChanged')) {
                obj['stateChanged'] = ApiClient.convertToType(data['stateChanged'], 'Date');
            }
            if (data.hasOwnProperty('startedAt')) {
                obj['startedAt'] = ApiClient.convertToType(data['startedAt'], 'String');
            }
            if (data.hasOwnProperty('userTask')) {
                obj['userTask'] = ApiClient.convertToType(data['userTask'], 'String');
            }
            if (data.hasOwnProperty('taskState')) {
                obj['taskState'] = ApiClient.convertToType(data['taskState'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('bootOptions')) {
                obj['bootOptions'] = InstanceBootOptions.constructFromObject(data['bootOptions']);
            }
            if (data.hasOwnProperty('serviceIp')) {
                obj['serviceIp'] = ApiClient.convertToType(data['serviceIp'], 'String');
            }
            if (data.hasOwnProperty('wifiIp')) {
                obj['wifiIp'] = ApiClient.convertToType(data['wifiIp'], 'String');
            }
            if (data.hasOwnProperty('secondaryIp')) {
                obj['secondaryIp'] = ApiClient.convertToType(data['secondaryIp'], 'String');
            }
            if (data.hasOwnProperty('services')) {
                obj['services'] = InstanceServices.constructFromObject(data['services']);
            }
            if (data.hasOwnProperty('panicked')) {
                obj['panicked'] = ApiClient.convertToType(data['panicked'], 'Boolean');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('fwpackage')) {
                obj['fwpackage'] = ApiClient.convertToType(data['fwpackage'], 'String');
            }
            if (data.hasOwnProperty('os')) {
                obj['os'] = ApiClient.convertToType(data['os'], 'String');
            }
            if (data.hasOwnProperty('agent')) {
                obj['agent'] = ApiClient.convertToType(data['agent'], 'String');
            }
            if (data.hasOwnProperty('netmon')) {
                obj['netmon'] = InstanceNetmonState.constructFromObject(data['netmon']);
            }
            if (data.hasOwnProperty('exposePort')) {
                obj['exposePort'] = ApiClient.convertToType(data['exposePort'], 'String');
            }
            if (data.hasOwnProperty('fault')) {
                obj['fault'] = ApiClient.convertToType(data['fault'], 'Boolean');
            }
            if (data.hasOwnProperty('patches')) {
                obj['patches'] = ApiClient.convertToType(data['patches'], ['String']);
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = CreatedBy.constructFromObject(data['createdBy']);
            }
        }
        return obj;
    }


}

/**
 * Instance Identifier
 * @member {String} id
 */
Instance.prototype['id'] = undefined;

/**
 * Instance Name
 * @member {String} name
 */
Instance.prototype['name'] = undefined;

/**
 * Key used to encrypt the Instance
 * @member {String} key
 */
Instance.prototype['key'] = undefined;

/**
 * The type of virtual machine this is
 * @member {String} flavor
 */
Instance.prototype['flavor'] = undefined;

/**
 * 
 * @member {String} type
 */
Instance.prototype['type'] = undefined;

/**
 * The projectId of the project this instance belongs to
 * @member {String} project
 */
Instance.prototype['project'] = undefined;

/**
 * @member {module:model/InstanceState} state
 */
Instance.prototype['state'] = undefined;

/**
 * Time the state of the instance last changed
 * @member {Date} stateChanged
 */
Instance.prototype['stateChanged'] = undefined;

/**
 * Time the instance was started
 * @member {String} startedAt
 */
Instance.prototype['startedAt'] = undefined;

/**
 * Currently executing User Task
 * @member {String} userTask
 */
Instance.prototype['userTask'] = undefined;

/**
 * Current task state if any
 * @member {String} taskState
 */
Instance.prototype['taskState'] = undefined;

/**
 * Current error state if any
 * @member {String} error
 */
Instance.prototype['error'] = undefined;

/**
 * @member {module:model/InstanceBootOptions} bootOptions
 */
Instance.prototype['bootOptions'] = undefined;

/**
 * Services IP Address
 * @member {String} serviceIp
 */
Instance.prototype['serviceIp'] = undefined;

/**
 * LAN IP Address
 * @member {String} wifiIp
 */
Instance.prototype['wifiIp'] = undefined;

/**
 * Secondary Inteface LAN IP Address (if supported)
 * @member {String} secondaryIp
 */
Instance.prototype['secondaryIp'] = undefined;

/**
 * @member {module:model/InstanceServices} services
 */
Instance.prototype['services'] = undefined;

/**
 * 
 * @member {Boolean} panicked
 */
Instance.prototype['panicked'] = undefined;

/**
 * Time instance was created
 * @member {Date} created
 */
Instance.prototype['created'] = undefined;

/**
 * Model of virtual machine device
 * @member {String} model
 */
Instance.prototype['model'] = undefined;

/**
 * URL that package used to create this instance is available at
 * @member {String} fwpackage
 */
Instance.prototype['fwpackage'] = undefined;

/**
 * 
 * @member {String} os
 */
Instance.prototype['os'] = undefined;

/**
 * 
 * @member {String} agent
 */
Instance.prototype['agent'] = undefined;

/**
 * @member {module:model/InstanceNetmonState} netmon
 */
Instance.prototype['netmon'] = undefined;

/**
 * 
 * @member {String} exposePort
 */
Instance.prototype['exposePort'] = undefined;

/**
 * 
 * @member {Boolean} fault
 */
Instance.prototype['fault'] = undefined;

/**
 * 
 * @member {Array.<String>} patches
 */
Instance.prototype['patches'] = undefined;

/**
 * @member {module:model/CreatedBy} createdBy
 */
Instance.prototype['createdBy'] = undefined;






export default Instance;

