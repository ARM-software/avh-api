/**
 * Arm API
 * REST API to manage your virtual devices.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Firmware model module.
 * @module model/Firmware
 * @version 1.0.0
 */
class Firmware {
    /**
     * Constructs a new <code>Firmware</code>.
     * @alias module:model/Firmware
     */
    constructor() { 
        
        Firmware.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Firmware</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Firmware} obj Optional instance to populate.
     * @return {module:model/Firmware} The populated <code>Firmware</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Firmware();

            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('buildid')) {
                obj['buildid'] = ApiClient.convertToType(data['buildid'], 'String');
            }
            if (data.hasOwnProperty('AndroidFlavor')) {
                obj['AndroidFlavor'] = ApiClient.convertToType(data['AndroidFlavor'], 'String');
            }
            if (data.hasOwnProperty('APIVersion')) {
                obj['APIVersion'] = ApiClient.convertToType(data['APIVersion'], 'String');
            }
            if (data.hasOwnProperty('sha256sum')) {
                obj['sha256sum'] = ApiClient.convertToType(data['sha256sum'], 'String');
            }
            if (data.hasOwnProperty('sha1sum')) {
                obj['sha1sum'] = ApiClient.convertToType(data['sha1sum'], 'String');
            }
            if (data.hasOwnProperty('md5sum')) {
                obj['md5sum'] = ApiClient.convertToType(data['md5sum'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('uniqueId')) {
                obj['uniqueId'] = ApiClient.convertToType(data['uniqueId'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('releasedate')) {
                obj['releasedate'] = ApiClient.convertToType(data['releasedate'], 'Date');
            }
            if (data.hasOwnProperty('uploaddate')) {
                obj['uploaddate'] = ApiClient.convertToType(data['uploaddate'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('orig_url')) {
                obj['orig_url'] = ApiClient.convertToType(data['orig_url'], 'String');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} version
 */
Firmware.prototype['version'] = undefined;

/**
 * @member {String} buildid
 */
Firmware.prototype['buildid'] = undefined;

/**
 * Andoird only flavor
 * @member {String} AndroidFlavor
 */
Firmware.prototype['AndroidFlavor'] = undefined;

/**
 * Android only API version
 * @member {String} APIVersion
 */
Firmware.prototype['APIVersion'] = undefined;

/**
 * @member {String} sha256sum
 */
Firmware.prototype['sha256sum'] = undefined;

/**
 * @member {String} sha1sum
 */
Firmware.prototype['sha1sum'] = undefined;

/**
 * @member {String} md5sum
 */
Firmware.prototype['md5sum'] = undefined;

/**
 * @member {Number} size
 */
Firmware.prototype['size'] = undefined;

/**
 * @member {String} uniqueId
 */
Firmware.prototype['uniqueId'] = undefined;

/**
 * Firmware metadata
 * @member {Object} metadata
 */
Firmware.prototype['metadata'] = undefined;

/**
 * Release Date
 * @member {Date} releasedate
 */
Firmware.prototype['releasedate'] = undefined;

/**
 * Date uploaded
 * @member {Date} uploaddate
 */
Firmware.prototype['uploaddate'] = undefined;

/**
 * URL firmware is available at
 * @member {String} url
 */
Firmware.prototype['url'] = undefined;

/**
 * URL firmware is available at from vendor
 * @member {String} orig_url
 */
Firmware.prototype['orig_url'] = undefined;

/**
 * @member {String} filename
 */
Firmware.prototype['filename'] = undefined;






export default Firmware;

